<java 基本用語>

■ 開発
ウォーターフォール開発 ・・・あらかじめ全工程にわたる計画を立て、開発手順を一つずつ確認しながら工程を進めていく手法。スケジュールが立てやすく品質重視だが、仕様の変更や追加に弱く、時間とコストがかかる。
アジャイル開発 ・・・スクラムとイテレーションを用いて機能を一つずつ開発し追加していく手法。仕様の変更や追加に強くスピーディーな開発が可能だが、柔軟性がある分、開発の方向性がぶれやすく品質が落ちてしまう可能性がある。
    → イテレーション(反復) ・・・「要件定義→設計→テスト→リリース(運用)」といった開発工程を1つの機能を単位としたサイクルで繰り返すこと。
    → スクラム ・・・チームワークを重視したフレームワーク。チームメンバー自ら計画を立て、イテレーションごとに開発の進行や製品に問題はないか正しく動いているかどうかを精査する。
マイグレーション ・・・ソフトウェアやシステム、データなどを別の環境に移転したり、新しい環境に切り替えたりすることを意味する。
デグレーション ・・・デグレードのこと。プログラムの状態が以前より悪くなること。
デプロイ ・・・主にネットワークを通じて提供されるWebアプリケーションなどのシステム開発工程において、システムを利用可能な状態にすること。
コンフリクト ・・・複数の装置やプログラムなどが同じ資源を同時に利用しようとして競合状態になってしまうことを意味する。
環境 ・・・ある装置やソフトウェアにとって、それが導入されるコンピュータのハードウェアの構成や設定、OSなどソフトウェアの構成や設定、及びそれら全体の組み合わせのこと。
開発環境（ローカル） ・・・機器やソフトウェア、システムを開発するために必要な機材やソフトウェアなどの組み合わせ。また、それらを組み合わせて構成された、開発者の作業環境。
検証環境（ステージング） ・・・開発環境で作られたシステムをテストするための工程。開発環境と分けることで、別の開発作業と並行してテストできるようになります。
本番環境 ・・・情報システムやソフトウェアの開発で、出来上がった製品を実際に稼働させて利用に供するための施設や機材、ソフトウェアなどを組み合わせた運用環境のこと。
設計書／仕様書 ・・・設計書は作る"過程"を説明する資料。仕様書は作る"もの"を説明する資料。
要件定義 ・・・システムやソフトウェアの開発において、実装すべき機能や満たすべき性能などを明確にしていく作業のこと。
基本設計書 ・・・要件定義に基づいて、システムの全体像や概要をまとめた資料。(外部向けの書類)
詳細設計書 ・・・基本設計をもとにして、プログラムでそれらをどのように実現するかを具体的にまとめた資料。(内部向けの書類)
テスト ・・・プログラムが仕様どうりに動くか確認する工程。
単体テスト（UT） ・・・最初に行うテスト。関数やメソッドといった小さい単位で行う。
結合テスト（CT／IT） ・・・手続きや関数といった個々の機能を結合させて、うまく連携・動作しているかを確認するテスト。
総合テスト（ST） ・・・開発者側の最終テスト。構築したシステムが全体として予定通りの機能を満たしているかどうかを確認する。
エビデンス／証跡 ・・・システム開発のテスト工程などで、システムが正しく動作している、あるいは不具合が生じたことを示す証拠となる書類やデータのこと。
データパッチ ・・・ソフトウェアを構成するプログラムやデータを更新・修正するために、新しい版との相違点(差分)を抜き出したデータのこと。
Access ・・・機器やソフトウェア、システム、情報などを利用(操作、取得、閲覧、読み書きなど)可能な状態にすること。
マクロ ・・・事前に操作手順などを記録しておき、その記録した内容をまとめて実行できるようにする機能のこと。
VBA ・・・Microsoft Officeに含まれるアプリケーションソフトの拡張機能で、利用者が簡易なプログラムを記述して実行することで複雑な処理の自動化などを行うことができるもの。また、そのために用意されたプログラミング用語。
GAS（Google Apps Script） ・・・Googleが提供しているJavaScriptをベースにしたプログラミング言語。Googleのサーバー上に実行環境があることが特徴。
API ・・・Applecation Programming Interfaceの略。ソフトウェアからOSの機能を利用するための仕様またはインターフェースの総称で、アプリケーションの開発を用意にするためのソフトウェア資源のこと。
WEB API ・・・APIの一つで、HTTPなどWebの技術を用いて構築されたもの。Webサイトに外部のサイトの提供する機能や情報を組み込んだり、アプリケーションソフトからWeb上で公開されている機能や情報を利用する際などに用いられる。
REST API ・・・RESTの考え方をWEBAPIに適用したもの。
    → REST ・・・Representational State Transferの略。分散システムにおいて複数のソフトウェアを連携させるのに適した設計原則の一つ。システムやセッションの状態に依存せず、同じURLやパラメータの組み合わせからは常に同じ結果が返される。
SOAP ・・・Simple Object Access Protocolの略。異なるコンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、連携して動作するための通信プロトコルの一つ。
Ajax ・・・Asyanchronous JavaScript + XMLの略。あるWebページを表示した状態のまま、別のページや再読み込みなどを伴わずにWebサーバ側と通信を行い、動的に表示内容を変更する手法。
XML ・・・Ectensible Markup Languageの略。文書やデータの意味や構造を記述するためのマークアップ言語の一つ。
JSON ・・・JavaScript Object Notationの略。JavaScriptにおけるオブジェクトの表記法を応用したテキストベースのデータ形式。多数の要素が複雑な構造で組み合わせられたデータを簡潔な表記で書き表す事ができる。
ステータスコード ・・・HTTPリクエストの結果を表す三桁の数字。
クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing） ・・・あるオリジンで動いているWebアプリケーションに対して、別のオリジンのサーバーへのアクセスをオリジン間HTTPリクエストによって許可できる仕組み。
バリデーション ・・・対象がその仕様や文法などに照らして適切に記述・構築されているか否かを検証すること。
データ連携 ・・・アプリケーションやシステム、格納先がそれぞれ異なるデータを、垣根を超えて共有・活用すること、またはそのための技術・プロセスのことです。
Daemon(デーモン) ・・・UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。利用者の操作とは無関係に処理を行うバックグラウンドプロセスの一種。
CRON ・・・Daemonの一種で、利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動する。
バッチ ・・・複数のプログラムからなる作業において、一連の処理をまとめたもの。
ログ ・・・起こった出来事についての情報などを一定の形式で時系列に記録・蓄積したデータのこと。
CSV ・・・Comma Separated Valuesの略。半角カンマ(,)の記号を用いてデータの構成要素単位(フィールド)の区切りを示すデータ形式。ファイル形式の拡張子は「.csv」
TSV ・・・Tab Separated Valuesの略。文字や文字列の間にタブ記号を挿入して区切りを設けるデータ形式。CSVのタブバージョン。
プルリクエスト（マージリクエスト） ・・・コードの変更をレビュワーに通知し、マージを依頼する機能。

■ チケット管理ツール
asana ・・・計画を整理して、順調に進めて、期限を守ることに特化したプロジェクト・タスク管理ツール。UIや操作性に優れる。
Backlog ・・・グラフによって可視化することで、プロジェクトの進捗を一目で確認する事が可能な管理ツール。
Jooto ・・・シンプルな操作性のタスク管理ツール。付箋のようなタスクカードをドラッグ&ドロップで動かしてタスク管理ができる。
Readmine ・・・情報が一箇所のデータベースで集中管理されているので整理しやすい管理ツール。
Trello ・・・無料で全ての機能が使える管理ツール。業界では一番多く利用されている。

■ バージョン管理
集中型 ・・・複数の作業者が同じファイル群(リポジトリ)を扱う。リポジトリは主サーバーに一つだけ存在していて、そこからファイルのコピーを取得することで作業ができる。オンラインでないと作業が行えない。
分散型 ・・・複数の作業者が独立したリポジトリを扱う。主となるサーバーは存在していなく、他の作業者のリポジトリと同期することで作業を行う。オフラインでも作業を行う事ができる。
Github ・・・Gitを利用したソフトウェア開発プロジェクトのためのWebサービス。
    → Git ・・・分散型のバージョン管理ツール。
Backlog ・・・Gitを用いてバージョン管理を行う事ができる。
SourceTree ・・・Gitを用いたバージョン管理ツール。GUIで視覚的に操作できる。
Tortoise SVN ・・・バージョン管理用のwindowsアプリ。GUIで視覚的に操作できる。
    → SVN ・・・Apache SubVersioNの略。バージョン管理システムの一つ。コマンドで操作する。
Git Flow ・・・Gitの機能であるブランチを活用したGitの開発手法。役割ごとにブランチを使い分けて開発を進める。
master ・・・リリース可能な完全品質を保証するブランチ。releaseブランチからのマージのみで更新される。masterブランチ上で直接作業したりコミットするのはNG。
release ・・・リリース作業を行うためのブランチ。developブランチから派生させる。リリース作業が完成したらmasterブランチとdevelopブランチにマージする。
develop ・・・開発の主軸になるブランチ。masterブランチから派生させる。developブランチ上で直接作業したりコミットするのはNG。
feature ・・・機能追加および修正作業を行うためのブランチ。developブランチから派生させる。作業完了してレビューが通ったら、developブランチにマージする。

■ FW／ライブラリ
FW(フレームワーク) ・・・システム開発を効率的に行うために用意されたプログラムの枠組み。
Spring Framework ・・・Java言語のWebアプリケーションフレームワーク。DIを重視した設計。
    DI ・・・Dependency Injection(依存性の注入)の略。依存している部分(他のクラスのインスタンスなど)を外から注入する事で柔軟に動かす事ができる。
Struts ・・・Apacheが開発したjava言語のWebアプリケーションフレームワーク。
JSF（Java Server Faces） ・・・Oracle社が開発したJava言語のWebアプリケーションフレームワーク。
ライブラリ ・・・ある特定の機能を持ったコンピュータプログラムを他のプログラムから呼び出して利用できるように部品化し、そのようなプログラム部品を複数集めて一つのファイルに収納したもの。
Bootstrap ・・・HTML/CSS/JavaScriptから構成される最も有名なWEBフレームワーク。CSSのコードを一から組む事なく、手軽で統一性のあるコーディングが可能。
Flyway ・・・オープンソースのデータベースマイグレーションツール。データベースの状態をバージョン管理する事ができる。
    → マイグレーション ・・・ソフトウェアやシステム、データなどを別の環境に移転したり、新しい環境に切り替えたりすること。
Jackson ・・・Java用のJSONパーサーライブラリの一つ。JavaオブジェクトとJSONの相互変換ができる。
jQuery ・・・JavaScriptでできることを、より簡単な記法で実現できるように設計されたJavaScriptライブラリ。
Junit ・・・Java言語で開発されたプログラムの単体テスト(ユニットテスト)を行うためのツール。
Log4j ・・・オープンソースのJavaプログラム用ロギングユーティリティ(API)。主にデバッグ用ツールとして使用される。
    → ロギングユーティリティ ・・・プログラム内部から、デバッグ情報やエラー情報などのログデータを、コンソール、ファイル、その他ログサーバなどへ出力する機能。
Lombok ・・・Java言語におけるボイラープレートコードをソースコードから排除するために使用するライブラリ。
    → ボイラープレートコード ・・・言語仕様上省く事ができない典型的なコードの事。本質的なロジックではないため、アプリケーションを実装する上で冗長なコードとなる。
ORM ・・・Object-Relational Mappingの略。インピーダンス・ミスマッチを解消して関係データベースのレコードを、オブジェクトとして直感的に扱えるようにしたもの。
    → インピーダンス・ミスマッチ ・・・オブジェクト指向は「現実世界の物事に即したデータモデル」である一方で、関係データベースは「検索やCRUDなどの処理に最適化されたデータモデル」となっている。このような設計思想の違いのこと。

■ 連絡ツール
ChatWork ・・・メール、電話、会議・訪問など仕事で必要なコミュニケーションをより効率的にするビジネスチャット。
Slack ・・・チャンネルベースのメッセージプラットフォーム。機能が豊富でほとんどのIT企業が採用している。
IP Messenger ・・・同一LAN内に限定されたメッセンジャーアプリ。外部ネットワークに出ることなく情報の共有ができるため、情報漏洩が発生しにくい。

■ Java
Javadoc ・・・ソースコードの内容から自動判別を行ったり、特定の書式で書かれたコメントを抜き出すことによって自動作成されたJavaのソースコードの説明書。
アノテーション ・・・Javaのコード上では"@"から始まり、コードでは表現しきれない情報を補足として付け加えられる。
メモリ管理 ・・・コンピュータのメモリを管理するもの。プログラムの要求に応じてメモリの一部を割り当てる方法と、そのメモリが不要となったときに再利用のために解放する方法を提供する。
ヒープ ・・・データ構造の一種で、木構造(ツリー構造)のうち、親要素が子要素より常に大きい(あるいは小さい)という条件を満たすもの。
    → ヒープ領域 ・・・コンピュータプログラムが利用するメモリ領域の種類の一つで、実行時に任意のタイミングで確保や開放が可能なもの。
GC ・・・Garbage Collectionの略。コンピュータプログラムの実行環境などが備える機能の一つで、実行中のプログラムが占有していたメモリ領域のうち不要になったものを自動的に解放し、空き領域として再利用できるようにするもの。
GoF ・・・Gang of Fourの略。書籍「オブジェクト指向における再利用のためのデザインパターン」の著者である、4人のプログラマのことを指す。
デザインパターン ・・・オブジェクト指向プログラミングにおける再利用性の高いコーディングのパターン

■ その他
オブジェクト指向 ・・・コンピュータプログラムの設計や実装についての考え方の一つで、互いに密接に関連するデータと手続きをオブジェクトと呼ばれる一つのまとまりとして定義し、様々のオブジェクトを組み合わせて関連性や相互作用を記述していくによりシステム全体を構築していく手法。
バッチ処理 ・・・まとめたバッチを一括で処理すること。
コンパイル ・・・プログラミング言語で書かれた文字列(ソースコード)を、コンピュータ上で実行可能な形式(オブジェクトコード)に変換すること。
カバレッジ ・・・モノや範囲に対して全体の内どれくらいをカバーしているかを表すための指標。
プラットホーム ・・・ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス、あるいはそれらの組み合わせ(動作環境)のこと。